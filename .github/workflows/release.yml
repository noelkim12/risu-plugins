name: Release Plugins

permissions:
  contents: write

on:
  push:
    tags:
      - 'hddm-edit-*'
      - 'cbs-intellisense-*'
      - 'lightboard-*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Detect Plugin
      id: detect
      run: |
        if [[ "${{ github.ref }}" == refs/tags/hddm-edit-* ]]; then
          echo "plugin=hddm_edit" >> $GITHUB_OUTPUT
          echo "version=${GITHUB_REF#refs/tags/hddm-edit-v}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/cbs-intellisense-* ]]; then
          echo "plugin=cbs_intellisense" >> $GITHUB_OUTPUT
          echo "version=${GITHUB_REF#refs/tags/cbs-intellisense-v}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/lightboard-* ]]; then
          echo "plugin=lightboard_nai_preset_manager" >> $GITHUB_OUTPUT
          echo "version=${GITHUB_REF#refs/tags/lightboard-nai-preset-v}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/plugin-dnd-* ]]; then
          echo "plugin=plugin_dnd" >> $GITHUB_OUTPUT
          echo "version=${GITHUB_REF#refs/tags/plugin-dnd-v}" >> $GITHUB_OUTPUT
        fi
    
    - name: Load Plugin Config
      id: config
      run: |
        PLUGIN="${{ steps.detect.outputs.plugin }}"
        VERSION="${{ steps.detect.outputs.version }}"
        
        # Load plugin configuration from versions.json
        PLUGIN_NAME=$(jq -r ".$PLUGIN.name" versions.json)
        PLUGIN_FILES=$(jq -r ".$PLUGIN.files[]" versions.json | tr '\n' ' ')
        
        echo "plugin_name=$PLUGIN_NAME" >> $GITHUB_OUTPUT
        echo "plugin_files=$PLUGIN_FILES" >> $GITHUB_OUTPUT
    
    - name: Create Release Package
      run: |
        PLUGIN="${{ steps.detect.outputs.plugin }}"
        VERSION="${{ steps.detect.outputs.version }}"
        
        # Create release directory
        mkdir -p release
        
        # Copy JS files only
        if [ "$PLUGIN" = "hddm_edit" ]; then
          cp hddm_edit/dist/hddm_edit_plugin.js release/
        elif [ "$PLUGIN" = "cbs_intellisense" ]; then
          cp cbs_intellisense/dist/cbs_intellisense.js release/
        elif [ "$PLUGIN" = "lightboard_nai_preset_manager" ]; then
          cp lightboard_nai_preset_manager/dist/lightboard_nai_preset_manager.js release/
        elif [ "$PLUGIN" = "plugin_dnd" ]; then
          cp plugin_dnd/dist/plugin_dnd.js release/
        fi
        
        # Create zip file
        cd release
        zip -r "../${PLUGIN}-v${VERSION}.zip" .
        cd ..
        
        # Copy main JS file separately with correct naming
        if [ "$PLUGIN" = "hddm_edit" ]; then
          cp hddm_edit/dist/hddm_edit_plugin.js "hddm-edit-v${VERSION}.js"
        elif [ "$PLUGIN" = "cbs_intellisense" ]; then
          cp cbs_intellisense/dist/cbs_intellisense.js "cbs-intellisense-v${VERSION}.js"
        elif [ "$PLUGIN" = "lightboard_nai_preset_manager" ]; then
          cp lightboard_nai_preset_manager/dist/lightboard_nai_preset_manager.js "lightboard-nai-preset-v${VERSION}.js"
        elif [ "$PLUGIN" = "plugin_dnd" ]; then
          cp plugin_dnd/dist/plugin_dnd.js "plugin-dnd-v${VERSION}.js"
        fi
        
        # Create file list for release
        echo "${PLUGIN}-v${VERSION}.zip" > release_files.txt
        if [ "$PLUGIN" = "hddm_edit" ]; then
          echo "hddm-edit-v${VERSION}.js" >> release_files.txt
        elif [ "$PLUGIN" = "cbs_intellisense" ]; then
          echo "cbs-intellisense-v${VERSION}.js" >> release_files.txt
        elif [ "$PLUGIN" = "lightboard_nai_preset_manager" ]; then
          echo "lightboard-nai-preset-v${VERSION}.js" >> release_files.txt
        elif [ "$PLUGIN" = "plugin_dnd" ]; then
          echo "plugin-dnd-v${VERSION}.js" >> release_files.txt
        fi
        
        # Debug: Show what files will be uploaded
        echo "Files to upload:"
        cat release_files.txt
        echo "Files in current directory:"
        ls -la *.js *.zip 2>/dev/null || echo "No js/zip files found"
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ steps.detect.outputs.plugin }}-v${{ steps.detect.outputs.version }}.zip
          *-v${{ steps.detect.outputs.version }}.js
        tag_name: ${{ github.ref_name }}
        name: ${{ steps.detect.outputs.plugin }} v${{ steps.detect.outputs.version }}
        body: |
          ## 📦 ${{ steps.detect.outputs.plugin }} v${{ steps.detect.outputs.version }}

          ### 📥 설치 방법
          1. `${{ steps.detect.outputs.plugin }}-v${{ steps.detect.outputs.version }}.js` 다운로드
          2. RISU AI 플러그인 관리자에서 업로드
          3. 플러그인 활성화
          
          ### 📋 변경사항
          자세한 내용은 GitHub 리포지토리의 README.md를 참고하세요.
        draft: false
        prerelease: false 
      env:
        GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
